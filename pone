#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>

#define BUFFER_SIZE 1024
#define SERVER_PORT 3456

void optO(int a);
void optT(int a);
void optN(int a);

int main() {
    char sAdd[256];
    int a;
    struct sockaddr_in server_addr;

    printf("Select server to connect to:\n1. newark.cs.sierracollege.edu\n2. london.cs.sierracollege.edu\nEnter pick (1 or 2): ");
    int pick;
    scanf("%d", &pick);

    if (pick == 1) {
        strcpy(sAdd, "newark.cs.sierracollege.edu");
    } else if (pick == 2) {
        strcpy(sAdd, "london.cs.sierracollege.edu");
    } else {
        fprintf(stderr, "Invalid choice. Exiting.\n");
        exit(EXIT_FAILURE);
    }

    a = socket(AF_INET, SOCK_STREAM, 0);
    if (a < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    struct addrinfo hints, *res;
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;

    if (getaddrinfo(sAdd, NULL, &hints, &res) != 0) {
        perror("Failed to resolve hostname");
        close(a);
        exit(EXIT_FAILURE);
    }

    memcpy(&server_addr.sin_addr, &((struct sockaddr_in *)res->ai_addr)->sin_addr, sizeof(server_addr.sin_addr));
    freeaddrinfo(res);

    if (connect(a, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        close(a);
        exit(EXIT_FAILURE);
    }

    printf("Connected to server: %s\n", sAdd);

    char buffer[BUFFER_SIZE];
    if (read(a, buffer, sizeof(buffer) - 1) > 0) {
        buffer[strcspn(buffer, "\n")] = 0;
        printf("Server: %s\n", buffer);
    } else {
        fprintf(stderr, "Failed to receive greeting\n");
        close(a);
        exit(EXIT_FAILURE);
    }

    while (1) {
        printf("\nMenu:\n1. List files\n2. Download a file\n3. Download all files\n4. Quit\nEnter your pick: ");
        int menu_choice;
        scanf("%d", &menu_choice);

        switch (menu_choice) {
            case 1:
                optO(a);
                break;
            case 2:
                optT(a);
                break;
            case 3:
                optN(a);
                break;
            case 4:
                printf("Goodbye!\n");
                write(a, "QUIT\n", strlen("QUIT\n"));
                close(a);
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }
}

void optO(int a) {
    char buffer[BUFFER_SIZE];
    write(a, "LIST\n", strlen("LIST\n"));
    printf("Available files:\n");

    while (1) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_read = read(a, buffer, sizeof(buffer) - 1);
        if (by
