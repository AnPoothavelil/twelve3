#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <stdbool.h>
#include <netdb.h>  // For getaddrinfo

#define BUFFER_SIZE 1024
#define SERVER_PORT 3456

void optO(int sockfd);
void optT(int sockfd);

int main() {
    char server_address[256];
    int sockfd;
    struct sockaddr_in server_addr;

    // Prompt user for server selection
    printf("Select server to connect to:\n");
    printf("1. newark.cs.sierracollege.edu\n");
    printf("2. london.cs.sierracollege.edu\n");
    printf("Enter choice (1 or 2): ");
    int choice;
    scanf("%d", &choice);

    if (choice == 1) {
        strcpy(server_address, "newark.cs.sierracollege.edu");
    } else if (choice == 2) {
        strcpy(server_address, "london.cs.sierracollege.edu");
    } else {
        fprintf(stderr, "Invalid choice. Exiting.\n");
        exit(EXIT_FAILURE);
    }

    // Create socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Setup server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    // Resolve hostname to IP using getaddrinfo
    struct addrinfo hints, *res;
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;

    int status = getaddrinfo(server_address, NULL, &hints, &res);
    if (status != 0) {
        fprintf(stderr, "Failed to resolve hostname: %s\n", gai_strerror(status));
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    memcpy(&server_addr.sin_addr, &((struct sockaddr_in *)res->ai_addr)->sin_addr, sizeof(server_addr.sin_addr));
    freeaddrinfo(res); // Free the linked list

    // Connect to the server
    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection to server failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Connected to server: %s\n", server_address);

    char buffer[BUFFER_SIZE];
    // Receive initial greeting from server
    if (read(sockfd, buffer, sizeof(buffer) - 1) > 0) {
        printf("Server: %s", buffer);
    } else {
        fprintf(stderr, "Failed to receive greeting from server\n");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    while (true) {
    // Present menu options
        printf("\nMenu:\n1. List available files\n2. Download a file\n3. Download all files\n4. Quit\n");
        printf("Enter your choice: ");

        int menu_choice;
        scanf("%d", &menu_choice);
    
        switch (menu_choice) {
            case 1:
                optO(sockfd);
                break;
            case 2:
                optT(sockfd);
                break;
            case 3:
                downloadAllFiles(sockfd); // New function call
                break;
            case 4:
                printf("Quitting program. Goodbye!\n");
                write(sockfd, "QUIT\n", strlen("QUIT\n"));
                close(sockfd);
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }
}

void optO(int sockfd) {
    char buffer[BUFFER_SIZE];

    // Send LIST command
    write(sockfd, "LIST\n", strlen("LIST\n"));

    // Receive and display the list
    printf("Available files:\n");
    while (true) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
        if (bytes_read <= 0) {
            fprintf(stderr, "Connection lost while listing files\n");
            return;
        }

        printf("%s", buffer);

        // Check for end of list (single dot on a line)
        if (strstr(buffer, "\n.") != NULL) {
            break;
        }
    }
}

void optT(int sockfd) {
    char filename[BUFFER_SIZE];
    char buffer[BUFFER_SIZE];

    printf("Enter the filename to download: ");
    scanf("%s", filename);

    // Construct GET command
    snprintf(buffer, sizeof(buffer), "GET %s\n", filename);
    write(sockfd, buffer, strlen(buffer));

    // Read server response
    memset(buffer, 0, sizeof(buffer));
    if (read(sockfd, buffer, sizeof(buffer) - 1) > 0) {
        if (strncmp(buffer, "+OK", 3) != 0) {
            printf("Server error: %s\n", buffer);
            return;
        }
    }

    // Ask the user if they want to display or save the file
    printf("Do you want to display the file content on the screen (y/n)? ");
    char choice;
    scanf(" %c", &choice);

    if (choice == 'y' || choice == 'Y') {
        printf("Displaying file content:\n\n");
        while (true) {
            memset(buffer, 0, sizeof(buffer));
            int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
            if (bytes_read <= 0) {
                break;
            }

            buffer[bytes_read] = '\0'; // Null-terminate the buffer for safe printing
            printf("%s", buffer);
        }
        printf("\nEnd of file content.\n");
    } else {
        // Open file for writing
        FILE *file = fopen(filename, "wb");
        if (file == NULL) {
            perror("File creation failed");
            return;
        }

        printf("Downloading file: %s\n", filename);
        while (true) {
            memset(buffer, 0, sizeof(buffer));
            int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
            if (bytes_read <= 0) {
                break;
            }

            // Write the buffer content to the file
            fwrite(buffer, 1, bytes_read, file);
        }

        fclose(file);
        printf("File downloaded successfully!\n");
    }
}




void downloadAllFiles(int sockfd) {
    char buffer[BUFFER_SIZE];

    // Request the list of files
    write(sockfd, "LIST\n", strlen("LIST\n"));

    printf("Fetching list of files...\n");

    // Store the filenames
    char filenames[100][BUFFER_SIZE];
    int file_count = 0;

    // Receive the file list
    while (true) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
        if (bytes_read <= 0) {
            fprintf(stderr, "Connection lost while listing files\n");
            return;
        }

        buffer[bytes_read] = '\0'; // Null-terminate the buffer
        printf("%s", buffer); // Show the file list to the user

        // Process filenames and store them
        char *line = strtok(buffer, "\n");
        while (line != NULL) {
            if (strcmp(line, ".") == 0) { // End of list
                break;
            }
            strncpy(filenames[file_count], line, BUFFER_SIZE - 1);
            file_count++;
            line = strtok(NULL, "\n");
        }

        if (strstr(buffer, "\n.") != NULL) {
            break; // End of list reached
        }
    }

    // Download each file
    for (int i = 0; i < file_count; i++) {
        printf("\nDownloading file: %s\n", filenames[i]);

        char get_command[BUFFER_SIZE];
        snprintf(get_command, sizeof(get_command), "GET %s\n", filenames[i]);
        write(sockfd, get_command, strlen(get_command));

        // Read server response
        memset(buffer, 0, sizeof(buffer));
        if (read(sockfd, buffer, sizeof(buffer) - 1) > 0) {
            if (strncmp(buffer, "+OK", 3) != 0) {
                printf("Server error for file '%s': %s\n", filenames[i], buffer);
                continue;
            }
        }

        // Save the file
        FILE *file = fopen(filenames[i], "wb");
        if (file == NULL) {
            perror("File creation failed");
            continue;
        }

        while (true) {
            memset(buffer, 0, sizeof(buffer));
            int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
            if (bytes_read <= 0) {
                break;
            }

            fwrite(buffer, 1, bytes_read, file);
        }

        fclose(file);
        printf("File '%s' downloaded successfully!\n", filenames[i]);
    }
}
