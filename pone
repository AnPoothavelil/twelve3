#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>

#define BUFFER_SIZE 1024

void list_files(int sockfd);
void download_file(int sockfd);

int main() {
    char *hostname = "newark.cs.sierracollege.edu";
    struct addrinfo hints, *res;
    int sockfd;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;

    if (getaddrinfo(hostname, "3456", &hints, &res) != 0) {
        perror("getaddrinfo failed");
        exit(EXIT_FAILURE);
    }

    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd < 0) {
        perror("Socket creation failed");
        freeaddrinfo(res);
        exit(EXIT_FAILURE);
    }

    if (connect(sockfd, res->ai_addr, res->ai_addrlen) < 0) {
        perror("Connection failed");
        close(sockfd);
        freeaddrinfo(res);
        exit(EXIT_FAILURE);
    }

    printf("Connected to server %s\n", hostname);

    freeaddrinfo(res);

    // Main program loop
    char buffer[BUFFER_SIZE];
    while (1) {
        printf("\nMenu:\n");
        printf("1. List available files\n");
        printf("2. Download a file\n");
        printf("3. Quit\n");
        printf("Enter choice: ");
        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                list_files(sockfd);
                break;
            case 2:
                download_file(sockfd);
                break;
            case 3:
                printf("Exiting...\n");
                close(sockfd);
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}

void list_files(int sockfd) {
    char buffer[BUFFER_SIZE];
    write(sockfd, "LIST\n", strlen("LIST\n"));
    
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
        if (bytes_read <= 0) {
            break;
        }
        printf("%s", buffer);
        if (strstr(buffer, "\n.") != NULL) {
            break;
        }
    }
}

void download_file(int sockfd) {
    char filename[BUFFER_SIZE];
    char buffer[BUFFER_SIZE];

    printf("Enter filename to download: ");
    scanf("%s", filename);

    snprintf(buffer, sizeof(buffer), "GET %s\n", filename);
    write(sockfd, buffer, strlen(buffer));

    memset(buffer, 0, sizeof(buffer));
    if (read(sockfd, buffer, sizeof(buffer) - 1) > 0) {
        if (strncmp(buffer, "+OK", 3) != 0) {
            printf("Server error: %s\n", buffer);
            return;
        }
    }

    FILE *file = fopen(filename, "wb");
    if (file == NULL) {
        perror("File creation failed");
        return;
    }

    while (1) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);
        if (bytes_read <= 0) {
            break;
        }
        fwrite(buffer, 1, bytes_read, file);
    }

    fclose(file);
    printf("File downloaded successfully!\n");
}
